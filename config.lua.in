package.path = "@MODULE_PATH@/.?;" .. package.path
netif = require("netif")

-- Configuration variables
--
-- This is a string list of kernel module names to exclude from loading
-- exclude = { "ichwd", "uhid" }

-- This is a string list of network device to be ignored by the network
-- setup functions
-- ignore_netifs = { "ath0" }

-- This is a boolean variable which controls the whether to auto configure
-- network devices
enable_netconfig = true

------------------------------------------------------------------------------
-- Functions
--
-- Most functions take a device object as argument. A device object is a
-- data structure that contains the following fields:
-- 	bus ::= "1" | "2"
--		Where 1 stands for USB, and 2 stands for PCI
--	descr     ::= Device description string from the pciid/usbids DB.
--	vendor    ::= vendor ID
--	device    ::= device ID
--	subvendor ::= subvendor ID
--	subdevice ::= subdevice ID
--	class     ::= device class ID
--	subclass  ::= device subclass ID
--	revision  ::= Revision number
--	ndrivers  ::= Number of associated drivers in drivers[]
--	nifaces   ::= Number of USB interfaces
--	iface[]   ::= An array of "nifaces" USB interface objects (see below)
--	drivers[] ::= An array of associated drivers (strings).
--
-- The USB interface object structure contains the following fields:
--	class     ::= Device class ID
--	subclass  ::= Device subclass ID
--	protocol  ::= Device protocol
--

-- The init() function is run on startup before adding devices. It doesn't
-- take any arguments. The return value is ignored.
function init()
	if enable_netconfig then
		netif.setup_ether_devs()
		netif.create_wlan_devs()
	end
end

-- The on_load_kmod() function is called after loading a driver/kmod (string)
-- for the given device object. The return value is ignored. 
--
function on_load_kmod(dev, kmod)
	if enable_netconfig then
		is_netif, iftype = netif.match_netif_type(kmod)
		if is_netif and iftype == netif.NETIF_TYPE_WLAN then
			if netif.wait_for_new_wlan(kmod, 5) ~= nil then
				netif.create_wlan_devs()
			end
		elseif is_netif and iftype == netif.NETIF_TYPE_ETHER then
				if netif.wait_for_new_ether(kmod, 5) ~= nil then
					netif.setup_ether_devs()
				end
		end
	end
end

-- The on_add_device() function is called every time a new device was added,
-- but before a driver was loaded. The return value is ignored.
--
-- function on_add_device(dev)
-- end
 
-- The affirm() function is called before loading a kmod.
-- If affirm() returns "true", the kmod will be loaded. Otherwise
-- loading is rejected.
--
-- function affirm(dev, kmod)
-- 	return true
-- end
